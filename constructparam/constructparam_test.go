package constructparam

import (
	"fmt"
	"github.com/unknown321/fuse/areacode"
	"github.com/unknown321/fuse/fobcolor"
	"reflect"
	"testing"
)

func TestConstructParam_FromInt(t *testing.T) {
	type args struct {
		i int
	}
	tests := []struct {
		name    string
		fields  ConstructParam
		args    args
		wantErr bool
	}{
		{
			name: "",
			fields: ConstructParam{
				AreaCode:      areacode.NorthPacificOcean,
				baseColorBit1: 1,
				baseColorBit2: 1,
				LayoutCode:    53,
				Mysterious:    46,
				bit0:          1,
				Color:         fobcolor.Camo10Wooden,
			},
			args: args{
				i: 461660523,
			},
			wantErr: false,
		},
		{
			name: "",
			fields: ConstructParam{
				AreaCode:      areacode.NorthAtlanticOcean,
				baseColorBit1: 15,
				baseColorBit2: 0,
				LayoutCode:    71,
				Mysterious:    23,
				bit0:          1,
				Color:         fobcolor.Camo8Forest,
			},
			args: args{
				i: 96841615,
			},
			wantErr: false,
		},
		{
			name: "",
			fields: ConstructParam{
				AreaCode:      areacode.NorthPacificOcean,
				Color:         fobcolor.Camo10Wooden,
				LayoutCode:    53,
				Mysterious:    46,
				baseColorBit1: 1,
				baseColorBit2: 1,
				bit0:          1,
			},
			args: args{
				i: 461660523,
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := ConstructParam{}
			if err := c.FromInt(tt.args.i); (err != nil) != tt.wantErr {
				t.Errorf("FromInt() error = %v, wantErr %v", err, tt.wantErr)
			}

			if !reflect.DeepEqual(c, tt.fields) {
				t.Errorf("not equal: %+v", c)
			}
		})
	}
}

func TestConstructParam_ToInt(t *testing.T) {
	tests := []struct {
		name    string
		fields  ConstructParam
		want    int
		wantErr bool
	}{
		{
			name: "using base color bits instead of color",
			fields: ConstructParam{
				AreaCode:      areacode.NorthPacificOcean,
				baseColorBit1: 1,
				baseColorBit2: 1,
				LayoutCode:    53,
				Mysterious:    46,
				Color:         fobcolor.End,
			},
			want: 461660523,
		},
		{
			name: "",
			fields: ConstructParam{
				AreaCode:   areacode.NorthPacificOcean,
				LayoutCode: 53,
				Mysterious: 46,
				Color:      fobcolor.Camo10Wooden,
			},
			want: 461660523,
		},
		{
			name: "",
			fields: ConstructParam{
				AreaCode:      areacode.NorthAtlanticOcean,
				baseColorBit1: 15,
				baseColorBit2: 0,
				Color:         fobcolor.End,
				LayoutCode:    71,
				Mysterious:    23,
			},
			want: 96841615,
		},
		{
			name: "",
			fields: ConstructParam{
				AreaCode:   areacode.NorthAtlanticOcean,
				Color:      fobcolor.Camo8Forest,
				LayoutCode: 71,
				Mysterious: 23,
			},
			want:    96841615,
			wantErr: false,
		},
		{
			name: "just generating values for quick testing",
			fields: ConstructParam{
				AreaCode:      33,
				baseColorBit1: 1,
				baseColorBit2: 1,
				LayoutCode:    10,
				Mysterious:    46,
			},
			want:    461660523,
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &ConstructParam{
				AreaCode:      tt.fields.AreaCode,
				baseColorBit1: tt.fields.baseColorBit1,
				baseColorBit2: tt.fields.baseColorBit2,
				LayoutCode:    tt.fields.LayoutCode,
				Mysterious:    tt.fields.Mysterious,
				bit0:          tt.fields.bit0,
				Color:         tt.fields.Color,
			}
			if got := c.ToInt(); got != tt.want {
				if tt.wantErr {
					fmt.Printf("ToInt() = %v, want %v (it's ok)\n", got, tt.want)
				} else {
					t.Fatalf("ToInt() = %v, want %v\n", got, tt.want)
				}
			}
		})
	}
}

func TestBulk(t *testing.T) {
	vals := []int{
		100789313,
		100827217,
		100953451,
		101032591,
		101035919,
		104980545,
		105023569,
		105024337,
		105144427,
		105145195,
		105227407,
		105229199,
		109174849,
		109175361,
		109215825,
		109339243,
		109341547,
		109381757,
		109420687,
		109423503,
		109424271,
		109424527,
		113533035,
		113533291,
		113533547,
		113533803,
		113534315,
		113574013,
		113614991,
		113615503,
		113616015,
		113618575,
		113618831,
		117565761,
		117604433,
		117607761,
		117727339,
		117728363,
		117809295,
		117810063,
		117811343,
		121759851,
		121798737,
		121800811,
		121801553,
		121921643,
		121922411,
		121922667,
		122003599,
		122006415,
		125993041,
		125996625,
		126115947,
		126116459,
		126156925,
		126157437,
		126198415,
		12623893,
		12624405,
		12625941,
		12626769,
		12664873,
		12668713,
		12705857,
		12746833,
		12750673,
		12869739,
		12869757,
		12870763,
		12871787,
		12872513,
		12873323,
		12914301,
		12951695,
		12953231,
		130065233,
		130146369,
		130146881,
		130313067,
		130351741,
		130392207,
		130395791,
		134344257,
		134381649,
		134385233,
		134504555,
		134507371,
		134508139,
		134549373,
		134586493,
		134586511,
		138575953,
		138698859,
		138739837,
		138742635,
		138780815,
		142729281,
		142770257,
		142773073,
		142773841,
		142774097,
		142893675,
		142934141,
		142975119,
		142976143,
		142977935,
		142978191,
		142978667,
		142978703,
		146924609,
		146964561,
		146967377,
		147090283,
		147169361,
		147169423,
		151160913,
		151281771,
		151325505,
		151363727,
		155312193,
		155353169,
		155476075,
		155478123,
		155479659,
		155519869,
		155558031,
		159547473,
		159547499,
		159670379,
		159752335,
		159752847,
		163700801,
		163741777,
		163744593,
		163745361,
		163867755,
		163868523,
		163921,
		163946639,
		163948175,
		163961,
		164473,
		167813185,
		167895105,
		167938897,
		168058987,
		168059499,
		168140943,
		168141455,
		168144527,
		16818197,
		16818709,
		16819221,
		16820245,
		16941137,
		16942161,
		16945003,
		17064043,
		17106301,
		17146511,
		17148815,
		172130385,
		172130641,
		172253291,
		172255339,
		172256107,
		172256875,
		172335247,
		172338831,
		176324689,
		176447595,
		176449131,
		176529551,
		176533391,
		180641899,
		180723855,
		180725647,
		184592491,
		184836459,
		184879997,
		184918159,
		184918671,
		184919951,
		184921743,
		189030507,
		189031787,
		189071485,
		189112463,
		189112913,
		189113487,
		189115243,
		193105277,
		193224811,
		193225067,
		193225323,
		197419115,
		197460587,
		197462141,
		197504655,
		201613419,
		201616747,
		201695375,
		205807723,
		205808747,
		205889679,
		210002027,
		210002539,
		210003819,
		210085007,
		21012501,
		21013013,
		21013269,
		21015573,
		21016341,
		21057321,
		21094465,
		21098049,
		21135441,
		21258347,
		21342351,
		214196331,
		214280335,
		218390635,
		218473103,
		218476175,
		222584939,
		222666895,
		222667151,
		222669967,
		226779243,
		226780267,
		226861199,
		226861967,
		230973547,
		230975595,
		231056527,
		231058319,
		235249807,
		235251087,
		235253391,
		239444879,
		243638415,
		243639951,
		247832719,
		247834767,
		247835535,
		247835791,
		252029839,
		25206805,
		25207829,
		25208085,
		25210645,
		25247785,
		25329745,
		25331793,
		25452651,
		25453675,
		25534607,
		25536533,
		25536655,
		256221327,
		256224911,
		268476523,
		268476693,
		268476737,
		268476779,
		268476815,
		268477009,
		268477291,
		268477327,
		268722539,
		268764029,
		268805007,
		272671509,
		276865301,
		281101097,
		286827,
		289448725,
		289643,
		289735549,
		293683497,
		293970831,
		29401109,
		29401621,
		29403157,
		29442089,
		29524049,
		29524817,
		29527633,
		29646955,
		29647979,
		29650795,
		297836821,
		297919297,
		298165135,
		302358927,
		314900861,
		319053931,
		319136143,
		323289981,
		330621,
		33677377,
		33718353,
		33721681,
		33722193,
		33841259,
		33841515,
		33844075,
		352608363,
		352650109,
		356884879,
		361079183,
		361079695,
		365191531,
		370831,
		377856399,
		37912657,
		38035563,
		38117519,
		381723217,
		381969259,
		386245007,
		390111339,
		390398059,
		390439823,
		398745707,
		398827919,
		407134315,
		407134571,
		407216271,
		40981,
		41001,
		41025,
		41041,
		41067,
		41085,
		41103,
		411083371,
		41237,
		41281,
		41297,
		41323,
		41341,
		41359,
		41493,
		41537,
		415523179,
		41553,
		41579,
		41597,
		41615,
		41749,
		41809,
		41835,
		41853,
		41871,
		419758955,
		41984081,
		42005,
		42049,
		42065,
		42069569,
		42091,
		42106961,
		42108753,
		42109,
		42127,
		42229867,
		42230123,
		42233451,
		42273661,
		42273917,
		42311823,
		42347,
		4235285,
		4236309,
		4236565,
		4238101,
		42383,
		4239125,
		42603,
		42639,
		43115,
		43133,
		43151,
		4319553,
		4361809,
		436576655,
		43857,
		440730493,
		44139,
		44309,
		44395,
		444883819,
		44585,
		44651,
		44687,
		44821,
		4483153,
		4483947,
		4484459,
		4484715,
		44907,
		449159823,
		4522109,
		453271915,
		453272427,
		457548669,
		461660267,
		461660523,
		46303569,
		46304081,
		46304337,
		46424171,
		46427243,
		46428011,
		46465149,
		46506127,
		46506895,
		470049131,
		478519695,
		491102607,
		499409259,
		50373713,
		50413609,
		50495569,
		50618475,
		50618731,
		50620523,
		50621547,
		50700431,
		50700943,
		50701393,
		512073871,
		520462735,
		524657039,
		54566953,
		54607913,
		54648897,
		54689873,
		54812713,
		54812779,
		54813291,
		54816143,
		54853757,
		54855805,
		54894735,
		54897807,
		58884177,
		58884945,
		59007083,
		59007851,
		59008107,
		59009131,
		59009899,
		59010667,
		59089039,
		59091855,
		63081041,
		63082065,
		63201387,
		63202411,
		63203947,
		63242365,
		63243389,
		63283343,
		63284111,
		63286159,
		67150479,
		67231809,
		67275601,
		67395691,
		67398933,
		67477647,
		67477903,
		67478671,
		67480463,
		71426625,
		71467345,
		71469905,
		71589969,
		71589995,
		71590251,
		71593579,
		71630973,
		71631741,
		71671951,
		75620417,
		75784299,
		79814721,
		79855697,
		79856209,
		79859537,
		79978603,
		79979371,
		80060497,
		80060559,
		80062351,
		80062607,
		80063375,
		81961,
		83241,
		84009025,
		84050001,
		84050513,
		84050769,
		84051793,
		84172907,
		84173163,
		84174187,
		84213885,
		84217469,
		84254863,
		84255631,
		84256911,
		84257679,
		8429589,
		8430613,
		8432405,
		8433233,
		8515137,
		8515393,
		8552529,
		85647,
		8675393,
		8675435,
		8716413,
		8757391,
		8760207,
		88246353,
		88367979,
		88369515,
		88408189,
		88412029,
		88449679,
		88449935,
		92441425,
		92561515,
		92562027,
		92562795,
		92563563,
		92643435,
		92643471,
		92643727,
		92643947,
		92643983,
		92644203,
		92644459,
		92646225,
		92646287,
		92647019,
		92647055,
		96632913,
		96633169,
		96633425,
		96633937,
		96755819,
		96759403,
		96759659,
		96796797,
		96797309,
		96800381,
		96838225,
		96840591,
		96841025,
		96841359,
		96841615,
	}

	for _, v := range vals {
		cc := ConstructParam{}
		err := cc.FromInt(v)
		if err != nil {
			t.Fatalf("%s", err.Error())
		}
	}
}
